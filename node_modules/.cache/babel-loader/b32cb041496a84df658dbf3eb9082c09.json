{"ast":null,"code":"import _classCallCheck from \"/Users/xs/technology-research/VirtualDom/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nvar Element = function Element(type, props, children) {\n  _classCallCheck(this, Element);\n\n  this.type = type;\n  this.props = props;\n  this.children = children;\n};\n\nfunction createElement(type, props, children) {\n  return new Element(type, props, children);\n}\n\nfunction render(domObj) {\n  // 根据type类型来创建对应的元素\n  var el = document.createElement(domObj.type); // 再去遍历props属性对象，然后给创建的元素el设置属性\n\n  for (var key in domObj.props) {\n    // 设置属性的方法\n    setAttr(el, key, domObj.props[key]);\n  } // 遍历子节点\n  // 如果是虚拟DOM，就继续递归渲染\n  // 不是就代表是文本节点，直接创建\n\n\n  domObj.children.forEach(function (child) {\n    child = child instanceof Element ? render(child) : document.createTextNode(child); // 添加到对应元素内\n\n    el.appendChild(child);\n  });\n  return el;\n}\n\nfunction setAttr(node, key, value) {\n  switch (key) {\n    case 'value':\n      // node是一个input或者textarea就直接设置其value即可\n      if (node.tagName.toLowerCase() === 'input' || node.tagName.toLowerCase() === 'textarea') {\n        node.value = value;\n      } else {\n        node.setAttribute(key, value);\n      }\n\n      break;\n\n    case 'style':\n      // 直接赋值行内样式\n      node.style.cssText = value;\n      break;\n\n    default:\n      node.setAttribute(key, value);\n      break;\n  }\n} // 将元素插入到页面内\n\n\nfunction renderDom(el, target) {\n  target.appendChild(el);\n}\n\nexport { Element, createElement, render, setAttr, renderDom };","map":{"version":3,"sources":["/Users/xs/technology-research/VirtualDom/src/Element.js"],"names":["Element","type","props","children","createElement","render","domObj","el","document","key","setAttr","forEach","child","createTextNode","appendChild","node","value","tagName","toLowerCase","setAttribute","style","cssText","renderDom","target"],"mappings":";;IACMA,O,GAEJ,iBAAYC,IAAZ,EAAkBC,KAAlB,EAAyBC,QAAzB,EAAmC;AAAA;;AACjC,OAAKF,IAAL,GAAYA,IAAZ;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,QAAL,GAAgBA,QAAhB;AACD,C;;AAIH,SAASC,aAAT,CAAuBH,IAAvB,EAA6BC,KAA7B,EAAoCC,QAApC,EAA8C;AAC5C,SAAO,IAAIH,OAAJ,CAAYC,IAAZ,EAAkBC,KAAlB,EAAyBC,QAAzB,CAAP;AACD;;AAED,SAASE,MAAT,CAAgBC,MAAhB,EAAwB;AACtB;AACA,MAAIC,EAAE,GAAGC,QAAQ,CAACJ,aAAT,CAAuBE,MAAM,CAACL,IAA9B,CAAT,CAFsB,CAItB;;AACA,OAAK,IAAIQ,GAAT,IAAgBH,MAAM,CAACJ,KAAvB,EAA8B;AAC1B;AACAQ,IAAAA,OAAO,CAACH,EAAD,EAAKE,GAAL,EAAUH,MAAM,CAACJ,KAAP,CAAaO,GAAb,CAAV,CAAP;AACH,GARqB,CAUtB;AACA;AACA;;;AACAH,EAAAA,MAAM,CAACH,QAAP,CAAgBQ,OAAhB,CAAwB,UAAAC,KAAK,EAAI;AAC7BA,IAAAA,KAAK,GAAIA,KAAK,YAAYZ,OAAlB,GAA6BK,MAAM,CAACO,KAAD,CAAnC,GAA6CJ,QAAQ,CAACK,cAAT,CAAwBD,KAAxB,CAArD,CAD6B,CAE7B;;AACAL,IAAAA,EAAE,CAACO,WAAH,CAAeF,KAAf;AACH,GAJD;AAMA,SAAOL,EAAP;AACD;;AAED,SAASG,OAAT,CAAiBK,IAAjB,EAAuBN,GAAvB,EAA4BO,KAA5B,EAAmC;AACjC,UAAOP,GAAP;AACI,SAAK,OAAL;AACI;AACA,UAAIM,IAAI,CAACE,OAAL,CAAaC,WAAb,OAA+B,OAA/B,IACAH,IAAI,CAACE,OAAL,CAAaC,WAAb,OAA+B,UADnC,EAC+C;AAC3CH,QAAAA,IAAI,CAACC,KAAL,GAAaA,KAAb;AACH,OAHD,MAGO;AACHD,QAAAA,IAAI,CAACI,YAAL,CAAkBV,GAAlB,EAAuBO,KAAvB;AACH;;AACD;;AACJ,SAAK,OAAL;AACI;AACAD,MAAAA,IAAI,CAACK,KAAL,CAAWC,OAAX,GAAqBL,KAArB;AACA;;AACJ;AACID,MAAAA,IAAI,CAACI,YAAL,CAAkBV,GAAlB,EAAuBO,KAAvB;AACA;AAhBR;AAkBD,C,CAED;;;AACA,SAASM,SAAT,CAAmBf,EAAnB,EAAuBgB,MAAvB,EAA+B;AAC7BA,EAAAA,MAAM,CAACT,WAAP,CAAmBP,EAAnB;AACD;;AAED,SACEP,OADF,EAEEI,aAFF,EAGEC,MAHF,EAIEK,OAJF,EAKEY,SALF","sourcesContent":["\nclass Element {\n\n  constructor(type, props, children) {\n    this.type = type;\n    this.props = props;\n    this.children = children;\n  }\n\n}\n\nfunction createElement(type, props, children) {\n  return new Element(type, props, children)\n}\n\nfunction render(domObj) {\n  // 根据type类型来创建对应的元素\n  let el = document.createElement(domObj.type);\n  \n  // 再去遍历props属性对象，然后给创建的元素el设置属性\n  for (let key in domObj.props) {\n      // 设置属性的方法\n      setAttr(el, key, domObj.props[key]);\n  }\n  \n  // 遍历子节点\n  // 如果是虚拟DOM，就继续递归渲染\n  // 不是就代表是文本节点，直接创建\n  domObj.children.forEach(child => {\n      child = (child instanceof Element) ? render(child) : document.createTextNode(child);\n      // 添加到对应元素内\n      el.appendChild(child);\n  });\n\n  return el;\n}\n\nfunction setAttr(node, key, value) {\n  switch(key) {\n      case 'value':\n          // node是一个input或者textarea就直接设置其value即可\n          if (node.tagName.toLowerCase() === 'input' ||\n              node.tagName.toLowerCase() === 'textarea') {\n              node.value = value;\n          } else {\n              node.setAttribute(key, value);\n          }\n          break;\n      case 'style':\n          // 直接赋值行内样式\n          node.style.cssText = value;\n          break;\n      default:\n          node.setAttribute(key, value);\n          break;\n  }\n}\n\n// 将元素插入到页面内\nfunction renderDom(el, target) {\n  target.appendChild(el);\n}\n\nexport {\n  Element,\n  createElement,\n  render,\n  setAttr,\n  renderDom\n};\n"]},"metadata":{},"sourceType":"module"}